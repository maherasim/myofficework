<?php

namespace Modules\Space\Controllers;

use App\Helpers\CodeHelper;
use App\Http\Controllers\Controller;
use App\Models\AddToFavourite;
use App\Models\AiPrompts;
use Illuminate\Support\Facades\Auth;
use Modules\Booking\Models\Booking;
use Modules\Location\Models\LocationCategory;
use Modules\Space\Models\Space;
use Modules\Space\Models\SpaceTerm;
use Modules\Core\Models\Terms;
use Illuminate\Http\Request;
use Modules\Location\Models\Location;
use Modules\Review\Models\Review;
use Modules\Core\Models\Attributes;
use DB;
use OpenAI;

class SpaceController extends Controller
{

    protected $spaceClass;
    protected $locationClass;
    /**
     * @var string
     */
    private $locationCategoryClass;

    public function __construct()
    {
        $this->spaceClass = Space::class;
        $this->locationClass = Location::class;
        $this->locationCategoryClass = LocationCategory::class;
    }

    public function callAction($method, $parameters)
    {
        if (!Space::isEnable()) {
            return redirect('/');
        }
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }
    public function searchView()
    {
        return view('Space::frontend.generator.standalone');
    }

    public function index(Request $request)
    {
        $is_ajax = $request->query('_ajax');
        $limit_location = 15;

        $searchMethod = trim($request->query('searchMethod'));

        if ($is_ajax) {
            $data = call_user_func([$this->spaceClass, 'search'], $request, true);
            $list = $data['results'];
            $markers = [];
            if (!empty($list)) {
                foreach ($list as $row) {
                    $markers[] = [
                        "id" => $row->id,
                        "title" => $row->title,
                        "lat" => (float) $row->map_lat,
                        "lng" => (float) $row->map_lng,
                        "gallery" => $row->getGallery(true),
                        "infobox" => view('Space::frontend.layouts.search.loop-gird', ['row' => $row, 'disable_lazyload' => 1, 'wrap_class' => 'infobox-item'])->render(),
                        'marker' => get_file_url(setting_item("space_icon_marker_map"), 'full') ?? url('images/myoffice-marker-1.png'),
                    ];
                    if ($is_ajax) {
                        Space::where('id', $row->id)->increment('views');
                    }
                }
            }
            if (empty(setting_item("space_location_search_style")) or setting_item("space_location_search_style") == "normal") {
                $limit_location = 1000;
            }
        } else {
            $list = Space::where('id', '>', 0)->limit(1)->paginate(1);
            $markers = [];
        }
        //$markers = [$markers[0]];
        if (!isset($_GET['start']) && !isset($_GET['end'])) {
            $date = date('m/d/Y');
            $newUrl = CodeHelper::getCurrentUrlWithoutQury();
            $queryParams = [
                'booking_type' => 'hourly',
                '_layout' => 'map',
                'long_term_rental' => '0',
                'search_type' => '1',
                'map_place' => '',
                'map_lat' => '',
                'map_lgn' => '',
                'start' => $date,
                'end' => $date,
                'date' => $date . ' - ' . $date,
                'from_hour' => '',
                'to_hour' => '',
                'adults' => '1',
            ];
            $queryString = http_build_query($queryParams);
            header("Location: $newUrl?$queryString");
            exit;
        }

        $data = [
            'rows' => $list,
            'list_location' => $this->locationClass::where('status', 'publish')->limit($limit_location)->with(['translations'])->get()->toTree(),
            'space_min_max_price' => $this->spaceClass::getMinMaxPrice(),
            'markers' => $markers,
            "blank" => setting_item('search_open_tab') == "current_tab" ? 0 : 1,
            "seo_meta" => $this->spaceClass::getSeoMetaForPageList(),
            'priceType' => $request->input('price_type')
        ];
        $layout = setting_item("space_layout_search", 'normal');
        if ($request->query('_layout')) {
            $layout = $request->query('_layout');
        }
        if ($is_ajax) {
            if ($searchMethod === "map") {
                return $this->sendSuccess([
                    'html' => '',
                    "markers" => $data['markers']
                ]);
            } else {
                return $this->sendSuccess([
                    'html' => view('Space::frontend.layouts.search-map.list-item', $data)->render(),
                    "markers" => $data['markers']
                ]);
            }
        }
        $data['attributes'] = Attributes::where('service', 'space')->orderBy("position", "desc")->with(['terms', 'translations'])->get();

        if ($layout == "map") {
            $data['body_class'] = 'has-search-map';
            $data['html_class'] = 'full-page';
            return view('Space::frontend.search-map', $data);
        }
        return view('Space::frontend.search', $data);
    }

    public function detail(Request $request, $slug)
    {
        $row = $this->spaceClass::where('slug', $slug)->with(['location', 'translations', 'hasWishList'])->first();
        if (empty($row) or !$row->hasPermissionDetailView()) {
            return redirect('/');
        }

        Space::where('id', $row->id)->increment('clicks');

        $translation = $row->translateOrOrigin(app()->getLocale());
        $space_related = [];
        $location_id = $row->location_id;
        if (!empty($location_id)) {
            $space_related = $this->spaceClass::where('location_id', $location_id)->where("status", "publish")->take(3)->whereNotIn('id', [$row->id])->with(['location', 'translations', 'hasWishList'])->get();
        }

        $category = $parking = null;

        $spaceTerms = SpaceTerm::where('target_id', $row['id'])->get();

        if ($spaceTerms) {
            foreach ($spaceTerms as $spaceTerm) {
                if ($spaceTerm->term->slug == 'parking') {
                    $parking = $spaceTerm->term;
                }
            }
        }

        //dd($parking);
        if ($category != null) {
            $row['category_name'] = $category->name;
        } else {
            $row['category_name'] = 'Uncategorized';
        }

        if ($parking != null) {
            $row['parking'] = $parking->name;
        } else {
            $row['parking'] = '';
        }

        $relatedSpaces = Space::where('status', 'publish')
            ->where('id', '!=', $row->id)
            ->whereRaw("(ST_Distance_Sphere(point(`map_lng`, `map_lat`), point(" . $row->map_lng . "," . $row->map_lat . "))) <= (20 / 0.001)")
            ->limit(12)->get();

        $totalRatings = Review::where('object_id', $row->id)
            ->where('object_model', 'space')->count();
        if ($totalRatings == null) {
            $totalRatings = 0;
        }

        $totalBookings = Booking::where('object_id', $row->id)
            ->where('object_model', 'space')
            ->where('status', '!=', 'pending')
            ->count();
        if ($totalBookings == null) {
            $totalBookings = 0;
        }

        $review_list = $row->getReviewList();
        $data = [
            'row' => $row,
            'translation' => $translation,
            'space_related' => $space_related,
            'location_category' => $this->locationCategoryClass::where("status", "publish")->with('location_category_translations')->get(),
            'booking_data' => $row->getBookingData(),
            'review_list' => $review_list,
            'seo_meta' => $row->getSeoMetaWithTranslation(app()->getLocale(), $translation),
            'body_class' => 'is_single',
            'space_terms' => $spaceTerms,
            'relatedSpaces' => $relatedSpaces,
            'totalRatings' => $totalRatings,
            'totalBookings' => $totalBookings
        ];
        $this->setActiveMenu($row);
        //dd($data);
        return view('Space::frontend.detail', $data);
    }


    public function addToFavourite(Request $request)
    {
        $favourite = new AddToFavourite();

        $is_already_fav = AddToFavourite::where('user_id', Auth::id())->where('object_id', $request->space_id)->first();

        if (!$is_already_fav) {
            $favourite->user_id = Auth::id();
            $favourite->object_id = $request->space_id;
            $favourite->save();
            return response()->json(['success' => 'Added To Favourites']);
        } else {
            AddToFavourite::where('user_id', Auth::id())->where('object_id', $request->space_id)->delete();
            return response()->json(['success' => 'Un favourite successfully.']);
        }
    }

    public function generator(Request $request)
    {
        if (($request->isMethod('post'))) {
            if (($request->has("title"))) {
                $q = $request->input("title");
                $query = $this->spaceClass::where("status", "publish")->where('title', 'like', '%' . $q . '%');

                $rows = $request->has("rows") ? $request->input("rows") : 20;
                $data = [
                    'rows' => $query->with(['author'])->paginate($rows),
                    'length' => $rows,
                ];
                return view('Space::frontend.generator.search', $data);
            } elseif ($request->has("id")) {
                $cats = $amns = [];
                $space = $this->spaceClass::find($request->get("id"));

                foreach ($space->terms as $t) {
                    if ($t->term->attr_id == 3)
                        $cats[] = $t->term->name;
                    if ($t->term->attr_id == 4)
                        $amns[] = $t->term->name;
                }
                shuffle($amns);
                if (count($amns) > 3)
                    $amns = array_slice($amns, 0, 3);


                $yourApiKey = "sk-proj-sW08bgbtifiVAMg1n7SQT3BlbkFJrDape0X3PWSTyOjtRdil";
                $client = OpenAI::client($yourApiKey);

                //                dd($space);
                $info = "\nTitle: " . $space->title;
                // $info .= PHP_EOL . "Latitutde: " . $space->location->map_lat;
                // $info .= PHP_EOL . "Longtitude: " . $space->location->map_lat;
                if (isset($space->city)) {
                    $info .= PHP_EOL . "City: " . $space->city;
                }
                if (isset($space->desk)) {
                    $info .= PHP_EOL . "Desk Count: " . $space->desk;
                }
                if (isset($space->max_guests)) {
                    $info .= PHP_EOL . "Seating Capacity: " . $space->max_guests;
                } else if ($space->location && isset($space->location->map_lat)) {
                    $info .= PHP_EOL . "Latitutde: " . $space->location->map_lat;
                } else {
                    $info .= PHP_EOL . "Latitude: Not available";
                }
                if ($space->location && isset($space->location->map_lng)) {
                    $info .= PHP_EOL . "Longitude: " . $space->location->map_lng;
                } else {
                    $info .= PHP_EOL . "Longitude: Not available";
                }
                $info .= PHP_EOL . "Categories: " . implode(", ", $cats);
                $info .= PHP_EOL . "Amneties: " . implode(", ", $amns);
                $info .= PHP_EOL . "Available: " . $space->available_from . " - " . $space->available_from . ", " . $space->first_working_day . " - " . $space->last_working_day;
                $info .= PHP_EOL . "Maximum Word Count: " . $request->input("wordcount");
                if ($request->input("style") != '')
                    $info .= PHP_EOL . "With the following language style: " . $request->input("style");
                $result = $client->completions()->create([
                    'model' => 'gpt-3.5-turbo-instruct',
                    'prompt' => 'Write a description in 3 paragraphs similar to this:

                    Welcome to OfficeWorks! Located in the bustling downtown core of Houston, we are a shared
                    office and co-working complex in a Corporate environment. Situated in the Greenleaf
                    neighbourhood, we are quickly accessible by transit and are within walking distance to shops,
                    restaurants and many other sights to see.

                    dont forget the availability of space:
                    Our listing includes two desks with seating capacity for up to 6 people. We provide a variety
                    of amenities such as Free Wifi, a Boardroom, Free Parking, Loading docks, and a Coffee station.
                    Additionally, we offer services like Receptionist support, Call Answering, and Mail forwarding
                    for a nominal fee. The space is available for immediate occupancy.

                    please this paragraph needs to be adjusted:
                    Booking a shared space with us offers numerous advantages over renting a dedicated office. Shared spaces promote collaboration, cost-effectiveness, and flexibility. By fostering creativity through diverse interactions, reducing overheads, and offering flexible work arrangements, these environments enhance productivity. Networking opportunities, modern amenities, and a vibrant community further contribute to a dynamic and innovative work atmosphere. From the following information: ' . $info . PHP_EOL . "Do not say the latitude and longitude but talk about the area around it.",
                    'max_tokens' => 2000,
                ]);
                $info = preg_replace('/(.*?): /', '<strong>$1</strong>: ', nl2br($info));
                //

                $data = [
                    'space' => $space,
                    'info' => $info,
                    'text' => nl2br($result->choices[0]->text),
                ];
                return view('Space::frontend.generator.results', $data);
            }
        }
        return view('Space::frontend.generator.standalone', );
    }

    public function spaceContentGenerator(Request $request)
    {
        $data = ['status' => 'error', 'message' => 'Failed to Generate Content'];
        if (($request->isMethod('post'))) {

            $space = new $this->spaceClass($request->all());

            if ($space != null) {

                $cats = $amns = $addonServices = [];

                $terms = $request->input('terms');
                if ($terms != null && $terms && count($terms) > 0) {
                    $terms = Terms::whereIn('id', $terms)->get();
                    foreach ($terms as $t) {
                        // echo $t->id . " " . $t->attribute->name . " " . $t->attribute->slug . " " . $t->name . "  </br>";
                        switch ($t->attribute->slug) {
                            case "space-type":
                                $cats[] = $t->name;
                                break;
                            case "amenities":
                                $amns[] = $t->name;
                                break;
                            case "corporate":
                                $addonServices[] = $t->name;
                                break;
                        }

                    }
                }

                if (count($cats) > 3) {
                    $cats = array_slice($cats, 0, 3);
                }

                if (count($amns) > 3) {
                    $amns = array_slice($amns, 0, 3);
                }

                if (count($addonServices) > 3) {
                    $addonServices = array_slice($addonServices, 0, 3);
                }

                $openAiKey = getSettingItem('openai_key');
                // $openAiPrompt = getSettingItem('openai_space_content_prompt');
                $openAiPrompt = AiPrompts::activePrompt('space-description-ai');
                // echo $openAiPrompt;die;
                if ($openAiPrompt != null) {

                    // $yourApiKey = "sk-proj-sW08bgbtifiVAMg1n7SQT3BlbkFJrDape0X3PWSTyOjtRdil";
                    $client = OpenAI::client($openAiKey);

                    $spaceData = [
                        'title' => $space->title,
                        'city' => $space->city,
                        'state' => $space->state,
                        'country' => $space->country,
                        'zipcode' => $space->zip,
                        'streetAddress' => $space->address,
                        'desks' => $space->desk,
                        'maxGuests' => $space->max_guests,
                        'latitude' => $space->map_lat,
                        'longitude' => $space->map_lng,
                        'categories' => implode(", ", $cats),
                        'amenities' => implode(", ", $amns),
                        'addonServices' => implode(',', $addonServices),
                        'availableFrom' => $space->available_from . " - " . $space->first_working_day,
                        'availableTo' => $space->available_to . " - " . $space->last_working_day,
                    ];

                    // dd($spaceData);

                    $data['space'] = $space;
                    $data['spaceData'] = $spaceData;

                    if ($spaceData['title'] == null) {
                        $data['message'] = "Enter space name first";
                    } elseif ($spaceData['city'] == null || $spaceData['state'] == null || $spaceData['country'] == null) {
                        $data['message'] = "Fill all address details of space";
                    } elseif ($spaceData['desks'] == null || $spaceData['maxGuests'] == null) {
                        $data['message'] = "Fill information about desks and max guests";
                    } elseif (count($cats) <= 0) {
                        $data['message'] = "Select space type first";
                    } elseif (count($amns) <= 0) {
                        $data['message'] = "Select some amenities first";
                    } else {

                        // dd($spaceData);

                        foreach ($spaceData as $key => $value) {
                            $openAiPrompt = str_replace("{" . $key . "}", $value, $openAiPrompt);
                        }

                        // $openAiPrompt .= '

                        //     IMPORTANT:- Above prompt results should return only and only in HTML format, properly format heading with bold, and bullet points for lists.
                        // '; 

                        try {

                            $gptModel = 'gpt-4o-mini';

                            $result = $client->chat()->create([
                                'model' => $gptModel,
                                'messages' => [
                                    ['role' => 'user', 'content' => $openAiPrompt],
                                ],
                            ]);

                            $openAiResponse = $result->choices[0]->message->content;

                            $start = strpos($openAiResponse, '```html') + 7;
                            $end = strpos($openAiResponse, '```', $start);

                            if ($start !== false && $end !== false) {
                                $openAiResponse = substr($openAiResponse, $start, $end - $start);
                            }

                            $parsedContent = CodeHelper::convertMarkdownInHtml($openAiResponse);

                            $data = [
                                'status' => 'success',
                                'result' => $result,
                                'content' => $parsedContent,
                                'aiResponse' => $openAiResponse,
                                'prompt' => $openAiPrompt,
                                'spaceData' => $spaceData,
                                'model' => $gptModel
                            ];

                        } catch (\Exception $ex) {
                            $data['error'] = $ex->getMessage();
                            $data['prompt'] = $openAiPrompt;
                            $data['spaceData'] = $spaceData;
                        }

                    }

                } else {
                    $data['message'] = "Prompt error, contact support.";
                }

            } else {
                $data['message'] = "Space not found.";
            }

        } else {
            $data['message'] = "Invalid Request";
        }
        return response()->json($data);
    }



}
