<?php

namespace Modules\Referalprogram\Admin;
use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Modules\AdminController;
use Modules\Booking\Models\Service;
use Modules\Coupon\Models\Coupon;
use Modules\Referalprogram\Models\ReferralLink;
use Modules\Referalprogram\Models\ReferralProgram;

class ReferalprogramController extends AdminController
{
    public function __construct()
    {
        parent::__construct();
        $this->setActiveMenu(route('referal-program.admin.index'));
    }
    public function callAction($method, $parameters)
    {
        return parent::callAction($method, $parameters); // TODO: Change the autogenerated stub
    }

    public function index(Request $request)
    {
        $query = ReferralProgram::query();

        $query->orderBy('id', 'desc');
        if (!empty($search = $request->input('s'))) {
            $query->where('name', 'LIKE', '%' . $search . '%');
            $query->orWhere('uri',   $search);
        }

        $data = [
            'rows'               => $query->with(['author'])->paginate(20),
            'breadcrumbs'        => [
                [
                    'name'  => __('Referal Management'),
                    'class' => 'active'
                ],
            ],
            'page_title' => __("Referal program Management"),
        ];
        return view('Referalprogram::admin.index', $data);
    }

    public function edit(Request $request, $id)
    {
        $row = ReferralProgram::find($id);
        if (empty($row)) {
            return redirect(route('referal-program.admin.index'));
        }

        $data = [
            'row'            => $row,
            'breadcrumbs'    => [
                [
                    'name' => __('All Referals'),
                    'url'  => route('referal-program.admin.index')
                ],
                [
                    'name' => __('Edit Referal program: :name', ['name' => $row->name]),
                ],
            ],
            'page_title' => __("Edit: :name", ['name' => $row->name]),
        ];
        return view('Referalprogram::admin.detail', $data);
    }

    public function create(Request $request)
    {
        $row = new ReferralProgram();
        $data = [
            'row'            => $row,
            'breadcrumbs'    => [
                [
                    'name' => __('All Referal programs'),
                    'url'  => route('referal-program.admin.index')
                ],
                [
                    'name' => __('Create Referal program'),
                ],
            ],
            'page_title' => __('Create Referal program'),
        ];
        return view('Referalprogram::admin.detail', $data);
    }

    public function store(Request $request, $id)
    {
        $request->validate([
            'name' => [
                'required',
                'max:50',
                'string',
                'alpha_dash',
                Rule::unique('referral_programs')->ignore($id > 0 ? $id : false)
            ],
            'uri' => ['required'],
            'amount' => ['required'],
        ]);

        if ($id > 0) {
            $row = ReferralProgram::find($id);
            if (empty($row)) {
                return redirect(route('referral-program.admin.index'));
            }
        } else {
            $row = new ReferralProgram();
        }

        $row->name = $request->name;
        $row->uri = $request->uri;
        $row->amount = $request->amount;
        $res = $row->save();
        if ($id < 0) {
        //create referal links for users
        $users = User::all();
        foreach($users as $user){
          $ReferralLink = new ReferralLink();
          $ReferralLink->getRefferal($user,$row);
        }
        }
        if ($res) {
            if ($id > 0) {
                return redirect()->back()->with('success',  __('Referral program updated'));
            } else {
                return redirect()->to(route('referal-program.admin.index'))->with('success',  __('Referral program created'));
            }
        }
    }

    public function bulkEdit(Request $request)
    {
        $ids = $request->input('ids');
        $action = $request->input('action');
        if (empty($ids) or !is_array($ids)) {
            return redirect()->back()->with('error', __('No items selected!'));
        }
        if (empty($action)) {
            return redirect()->back()->with('error', __('Please select an action!'));
        }
        switch ($action) {
            case "delete":
                foreach ($ids as $id) {
                    $query = Coupon::query()->where("id", $id);
                    $query->first();
                    if (!empty($query)) {
                        $query->delete();
                    }
                }
                return redirect()->back()->with('success', __('Deleted success!'));
                break;
            case "clone":
                foreach ($ids as $id) {
                    (new Coupon())->saveCloneByID($id);
                }
                return redirect()->back()->with('success', __('Clone success!'));
                break;
            default:
                // Change status
                foreach ($ids as $id) {
                    $query = Coupon::query()->where("id", $id);
                    $query->update(['status' => $action]);
                }
                return redirect()->back()->with('success', __('Update success!'));
                break;
        }
    }
}